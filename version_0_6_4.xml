<article data-sblg-article="1" data-sblg-tags="version">
	<header>
		<h1>0.6.4</h1>
		<address>Kristaps Dzonsons</address>
		<time datetime="2015-08-01">2015-08-01</time>
	</header>
	<aside>
		<div>
			Add some proper security to <a href="kfcgi.8.html">kfcgi(8)</a>: place child FastCGI processes in a file-system jail,
			drop privileges, and ensure proper ownership of the socket.
			While here, begin sandbox mechanisms for the FastCGI control process.
			This only works for Mac OSX for now, but will expand to others.
			Again, until the next minor version bump, <strong>FastCGI support is experimental</strong>.
		</div>
		<div>
			On that note, finalise the API for FastCGI calls.
			This involved moving most function arguments previously in <a href="khttp_fcgi_parse.3.html">khttp_fcgi_parse(3)</a>
			into <a href="khttp_fcgi_init.3.html">khttp_fcgi_init(3)</a>.
			To wit, the <code>khttp_fcgi_parsex()</code> function has been removed: all of the logic has been moved to the
			initialisation function, making the parse function much simpler.
			Cement this by adding several new regression tests that exercise the FastCGI functionality.
			These, of course, required that FastCGI functionality be added to the regression suite.
			This is documented in <a href="kcgiregress.3.html">kcgiregress(3)</a> (the manpage was renamed from <code>kcgi_regress</code>).
		</div>
		<div>
			In adding the regression suite, one critical FastCGI bug was found (and fixed) for forms &gt;1 kB.
			Fix another critical bug when writing large contiguous blocks, which would be silently truncated.
			(A regression test has been added for this.)
			Internally, the behaviour of read and write sockets is consistently non-blocking.
			There has been a report of large compressed output failing on FreeBSD, but this has not yet been verified.
		</div>
		<div>
			Lastly, incorporate a patch from Baptiste Daroussin (thanks!) for a tighter Capsicum sandbox for the parser process.
		</div>
	</aside>
</article>
