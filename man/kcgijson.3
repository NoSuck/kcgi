.\"	$Id$
.\"
.\" Copyright (c) 2014, 2017 Kristaps Dzonsons <kristaps@bsd.lv>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: September 22 2017 $
.Dt KCGIJSON 3
.Os
.Sh NAME
.Nm kcgijson ,
.Nm kjson_open ,
.Nm kjson_close ,
.Nm kjson_putbool ,
.Nm kjson_putboolp ,
.Nm kjson_putdouble ,
.Nm kjson_putdoublep ,
.Nm kjson_putint ,
.Nm kjson_putintp ,
.Nm kjson_putintstr ,
.Nm kjson_putintstrp ,
.Nm kjson_putnull ,
.Nm kjson_putnullp ,
.Nm kjson_putstring ,
.Nm kjson_putstringp ,
.Nm kjson_obj_open ,
.Nm kjson_objp_open ,
.Nm kjson_obj_close ,
.Nm kjson_array_open ,
.Nm kjson_arrayp_open ,
.Nm kjson_array_close ,
.Nm kjson_string_open ,
.Nm kjson_stringp_open ,
.Nm kjson_string_close ,
.Nm kjson_string_putdouble ,
.Nm kjson_string_putint ,
.Nm kjson_string_puts ,
.Nm kjson_string_write
.Nd JSON handling functions for kcgi
.Sh LIBRARY
.Lb libkcgijson
.Sh SYNOPSIS
.In sys/types.h
.In stdarg.h
.In stddef.h
.In stdint.h
.In kcgi.h
.In kcgijson.h
.Ft void
.Fo kjson_open
.Fa "struct kjsonreq *r"
.Fa "struct kreq *req"
.Fc
.Ft int
.Fo kjson_close
.Fa "struct kjsonreq *r"
.Fc
.Ft int
.Fo kjson_putbool
.Fa "struct kjsonreq *r"
.Fa "int val"
.Fc
.Ft int
.Fo kjson_putboolp
.Fa "struct kjsonreq *r"
.Fa "const char *key"
.Fa "int val"
.Fc
.Ft int
.Fo kjson_putdouble
.Fa "struct kjsonreq *r"
.Fa "double val"
.Fc
.Ft int
.Fo kjson_putdoublep
.Fa "struct kjsonreq *r"
.Fa "const char *key"
.Fa "double val"
.Fc
.Ft int
.Fo kjson_putint
.Fa "struct kjsonreq *r"
.Fa "int64_t val"
.Fc
.Ft int
.Fo kjson_putintp
.Fa "struct kjsonreq *r"
.Fa "const char *key"
.Fa "int64_t val"
.Fc
.Ft int
.Fo kjson_putintstr
.Fa "struct kjsonreq *r"
.Fa "int64_t val"
.Fc
.Ft int
.Fo kjson_putintstrp
.Fa "struct kjsonreq *r"
.Fa "const char *key"
.Fa "int64_t val"
.Fc
.Ft int
.Fo kjson_putnull
.Fa "struct kjsonreq *r"
.Fc
.Ft int
.Fo kjson_putnullp
.Fa "struct kjsonreq *r"
.Fa "const char *key"
.Fc
.Ft int
.Fo kjson_putstring
.Fa "struct kjsonreq *r"
.Fa "const char *val"
.Fc
.Ft int
.Fo kjson_putstringp
.Fa "struct kjsonreq *r"
.Fa "const char *key"
.Fa "const char *val"
.Fc
.Ft int
.Fo kjson_obj_open
.Fa "struct kjsonreq *r"
.Fc
.Ft int
.Fo kjson_objp_open
.Fa "struct kjsonreq *r"
.Fa "const char *key"
.Fc
.Ft int
.Fo kjson_obj_close
.Fa "struct kjsonreq *r"
.Fc
.Ft int
.Fo kjson_array_open
.Fa "struct kjsonreq *r"
.Fc
.Ft int
.Fo kjson_arrayp_open
.Fa "struct kjsonreq *r"
.Fa "const char *key"
.Fc
.Ft int
.Fo kjson_array_close
.Fa "struct kjsonreq *r"
.Fc
.Ft int
.Fo kjson_string_open
.Fa "struct kjsonreq *r"
.Fc
.Ft int
.Fo kjson_stringp_open
.Fa "struct kjsonreq *r"
.Fa "const char *key"
.Fc
.Ft int
.Fo kjson_string_close
.Fa "struct kjsonreq *r"
.Fc
.Ft int
.Fo kjson_string_putint
.Fa "struct kjsonreq *r"
.Fa "int64_t val"
.Fc
.Ft int
.Fo kjson_string_puts
.Fa "struct kjsonreq *r"
.Fa "const char *cp"
.Fc
.Ft int
.Fo kjson_string_write
.Fa "const char *cp"
.Fa "size_t sz"
.Fa "void *arg"
.Fc
.Sh DESCRIPTION
The
.Nm kcgijson
functions extend
.Xr kcgi 3
output with JSON objects and arrays for contexts allocated with
.Xr khttp_parse 3 .
None of these functions may be called before
.Xr khttp_body 3 .
.Pp
All
.Nm kcgijson
sequences begin and end with
.Nm kjson_open
and
.Nm kjson_close ,
respectively.
These enclose a standalone-type array or object context,
.Nm kjson_array_open
or
.Nm kjson_obj_open ,
respectively, each with its own pair-type or standalone-type children.
.Pp
In general,
.Nm kcgijson
functions follow the convention of writing either pair-type (ending in
.Qq p )
or standalone-type data.
Standalone values are used in arrays; key-value pairs are used in
objects.
Passing a
.Dv NULL
value as the key for any key-value pair function is the same as calling
the standalone version.
.Pp
To use these functions, you must include the
.In kcgijson.h
header and compile with
.Lb kcgijson ,
for example,
.Bd -literal
% cc -I/usr/local/include -c -o sample.o sample.c
% cc -L/usr/local/lib -o sample -lkcgijson -lkcgi -lz
.Ed
.Bl -tag -width Ds
.It Fn kjson_open
Initialise a JSON context.
.It Fn kjson_close
Close a JSON context as opened with
.Fn kjson_open .
This will also close any open arrays, strings, or objects.
You should not use the object after invoking this function.
.It Fn kjson_arrayp_open
This and
.Fn kjson_array_open
start an array context with or without a name.
.It Fn kjson_array_close
Close an array context with or without a name.
.It Fn kjson_string_open
This and
.Fn kjson_stringp_open
start a string context with or without a name.
This is usually used for complex values, or those create dynamically
with
.Xr khttp_template 3 .
The
.Fn kjson_string_putdouble ,
.Fn kjson_string_putint ,
.Fn kjson_string_putintstr ,
.Fn kjson_string_puts ,
and
.Fn kjson_string_write
functions may be used for serialising value data.
.It Fn kjson_string_close
Close a string context with or without a name.
.It Fn kjson_obj_open
This and
.Fn kjson_objp_open
start an object context with or without a name.
.It Fn kjson_obj_close
Close an object context with or without a name.
.It Fn kjson_putstringp
This and
.Fn kjson_putstring
emit a string value with or without a name.
Note that it is
.Em not
checked for character encoding, only character legality.
.It Fn kjson_putboolp
This and
.Fn kjson_putbool
emit a Boolean value with or without a name.
In the usual way, 0 evalutes to FALSE, non-zero to TRUE.
.It Fn kjson_putnullp
This and
.Fn kjson_putnull
emit a null value with or without a name.
.It Fn kjson_putintp
This and
.Fn kjson_putint
emit a 64-bit signed integer value with or without a name.
.Em Important note :
while JSON supports arbitrary number lengths, JavaScript is limited to
53 bits of integer precision.
Thus, use of this function should be avoided for JavaScript
applications.
Use
.Fn kjson_putintstr
instead.
.Fn kjson_putintstr
emit a 64-bit signed integer value in a string context, with or without
a name.
This function is generally used for passing integers to JavaScript
applications, which are limited in integer precision.
.It Fn kjson_putdoublep
This and
.Fn kjson_putdouble
emit a double-precision floating point value with or without a name.
This is formatted as with the
.Li %g
argument to
.Xr printf 3 .
.El
.Sh RETURN VALUES
Functions returning an
.Vt int
indicate zero on failure and non-zero on success.
.Pp
Failure for
.Dq open ,
.Dq write
and
.Dq put
functions occurs if the request occurs out of context, for example,
emitting a key-value pair in an array context (or the root context), or
emitting a standalone value in an object.
.Pp
For
.Dq close
functions, failure occurs when trying to close a different type, for
example, closing an array when an object is open.
Failure also occurs if there is nothing open to close.
For either of these, failure means that the requested operation was
ignored.
.Pp
For
.Fn kcgijson_close ,
failure only means that there are open scopes when the function was
invoked: all scopes are still closed.
.Sh STANDARDS
The
.Nm kcgijson
functions conform to the ECMA-404 JSON Data Interchange Standard.
Parts of this document reference ECMAScript 5, commonly known as
JavaScript.
.Sh AUTHORS
The
.Nm
library was written by
.An Kristaps Dzonsons Aq Mt kristaps@bsd.lv .
.Sh CAVEATS
The current hard-coded limit of nested objects is 128 levels.
When this is reached, the system will
.Xr abort 3 .
