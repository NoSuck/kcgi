.\"	$Id$
.\"
.\" Copyright (c) 2014, 2017 Kristaps Dzonsons <kristaps@bsd.lv>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: March 12 2017 $
.Dt KHTTP_TEMPLATE 3
.Os
.Sh NAME
.Nm khttp_template ,
.Nm khttp_templatex ,
.Nm khttp_template_buf ,
.Nm khttp_templatex_buf ,
.Nm khttp_template_fd ,
.Nm khttp_templatex_fd
.Nd emit filled-in templates for kcgi
.Sh LIBRARY
.Lb libkcgi
.Sh SYNOPSIS
.In stdarg.h
.In stdint.h
.In unistd.h
.In kcgi.h
.Ft int
.Fo khttp_template
.Fa "struct kreq *req"
.Fa "const struct ktemplate *t"
.Fa "const char *fname"
.Fc
.Ft int
.Fo khttp_templatex
.Fa "const struct ktemplate *t"
.Fa "const char *fname"
.Fa "const struct ktemplatex *tx"
.Fa "void *arg"
.Fc
.Ft int
.Fo khttp_template_buf
.Fa "struct kreq *req"
.Fa "const struct ktemplate *t"
.Fa "const char *buf"
.Fa "size_t sz"
.Fc
.Ft int
.Fo khttp_templatex_buf
.Fa "const struct ktemplate *t"
.Fa "const char *buf"
.Fa "size_t sz"
.Fa "const struct ktemplatex *tx"
.Fa "void *arg"
.Fc
.Ft int
.Fo khttp_template_fd
.Fa "struct kreq *req"
.Fa "const struct ktemplate *t"
.Fa "int fd"
.Fa "const char *filename"
.Fc
.Ft int
.Fo khttp_templatex_fd
.Fa "const struct ktemplate *t"
.Fa "int fd"
.Fa "const char *filename"
.Fa "const struct ktemplatex *tx"
.Fa "void *arg"
.Fc
.Sh DESCRIPTION
The
.Nm khttp_template ,
.Nm khttp_templatex ,
.Nm khttp_template_buf ,
.Nm khttp_templatex_buf ,
.Nm khttp_template_fd ,
and
.Nm khttp_templatex_fd
functions comprise a template system for a
.Xr kcgi 3
context allocated with
.Xr khttp_parse 3 .
They may only be called after
.Xr khttp_body 3 ,
else behaviour is undefined.
.Pp
These functions all accept
.Vt "struct ktemplate" ,
which consists of the following fields:
.Bl -tag -width Ds
.It Va "const char *const *key"
An array of keys.
When the template is parsed and encounters a key, it is looked up in
this array.
.It Va "size_t keysz"
The number of keys in
.Va key .
.It Va "void *arg"
The optional argument passed to
.Va cb .
.It Va "int (*cb)(size_t index, void *arg)"
The callback function called when a key in
.Va key
is found.
The
.Va index
is the position in
.Va key ,
which is always less than
.Va keysz .
The argument is given by the 
.Va arg
field to the structure.
.El
.Pp
The
.Nm khttp_templatex ,
.Nm khttp_templatex_buf ,
and
.Nm khttp_templatex_fd
functions accept
.Vt struct ktemplatex ,
which has the following fields:
.Bl -tag -width Ds
.It Va "int (*writer)(const char *b, size_t sz, void *arg)"
The function that writes data in
.Fa b
of size
.Fa sz
with private argument
.Fa arg
that's passed to the functions.
This may not be
.Dv NULL .
.It Va "int (*fbk)(const char *k, size_t sz, void *arg)"
If the given key
.Fa k
of length
.Fa sz
is not found in the template array, this function is invoked.
The
.Fa arg
is given within each function's
.Vt "struct ktemplate" .
This will usually use
.Fa writer
to write any data.
.El
.Pp
When
.Nm khttp_templatex_buf
is invoked (it is internally used by all of the templating functions),
the buffer is emitted until a
.Li @@foo@@
sequence (two
.Qq at
signs followed by a key, followed by a trailing pair of
.Qq at
signs) is encountered.
The key is first looked up in the
.Fa t
argument's
.Va key
array of size
.Va keysz .
If found, the callback
.Va cb
is invoked with the key index and the optional
argument
.Va arg .
If not found and one of
.Nm khttp_templatex ,
.Nm khttp_templatex_fd ,
or
.Nm khttp_templatex_buf
was used with a fallthrough callback function, the fallthrough callback
function will be invoked.
In either event, if the callback returns zero,
.Nm khttp_templatex_buf
fails.
This will trigger the failure of any invoking function such as
.Nm khttp_template .
If the key is not found and there is no fallthrough callback, it is
emitted as opaque text.
.Pp
If
.Fa t
is
.Dv NULL ,
the buffer (or file) is emitted without any processing.
.Sh RETURN VALUES
.Nm khttp_template
returns 0 if the
.Xr fstat 2 ,
.Xr open 2 ,
or
.Xr mmap 2
functions fail on the file, or the file is too large to map.
.Pp
The
.Nm khttp_template ,
.Nm khttp_template_buf ,
and
.Nm khttp_template_fd
functions fail if the callback function returns 0.
The
.Nm khttp_templatex ,
.Nm khttp_atemplatex_buf ,
and
.Nm khttp_atemplatex_fd
functions may also return 0 if the write functions return 0.
.Sh SEE ALSO
.Xr kcgi 3 ,
.Xr khttp_body 3 ,
.Xr khttp_parse 3 ,
.Xr khttp_write 3
.Sh AUTHORS
The
.Nm
library was written by
.An Kristaps Dzonsons Aq Mt kristaps@bsd.lv .
.Sh CAVEATS
The
.Nm khttp_template
and
.Nm khttp_templatex
functions need access to the file-system.
So if you're sandboxing your application, you should read the files
before the sandbox and use the buffer or file descriptor versions.
