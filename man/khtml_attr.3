.\"	$Id$
.\"
.\" Copyright (c) 2014 Kristaps Dzonsons <kristaps@bsd.lv>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: November 4 2014 $
.Dt KHTML_ATTR 3
.Os
.Sh NAME
.Nm khtml_attr ,
.Nm khtml_attrx ,
.Nm khtml_close ,
.Nm khtml_closeto ,
.Nm khtml_double ,
.Nm khtml_elem ,
.Nm khtml_elemat ,
.Nm khtml_entity ,
.Nm khtml_int ,
.Nm khtml_ncr ,
.Nm khtml_text
.Nd HTML handling functions for kcgi
.Sh LIBRARY
.Lb libkcgi
.Sh SYNOPSIS
.In kcgi.h
.Ft void
.Fo khtml_attr
.Fa "struct kreq *req"
.Fa "enum kelem elem"
.Fa "..."
.Fc
.Ft void
.Fo khtml_attrx
.Fa "struct kreq *req"
.Fa "enum kelem elem"
.Fa "..."
.Fc
.Ft void
.Fo khtml_close
.Fa "struct kreq *req"
.Fa "size_t count"
.Fc
.Ft void
.Fo khtml_closeto
.Fa "struct kreq *req"
.Fa "size_t pos"
.Fc
.Ft void
.Fo khtml_double
.Fa "struct kreq *req"
.Fa "double val"
.Fc
.Ft size_t
.Fo khtml_elemat
.Fa "struct kreq *req"
.Fc
.Ft void
.Fo khtml_entity
.Fa "struct kreq *req"
.Fa "enum entity entity"
.Fc
.Ft void
.Fo khtml_int
.Fa "struct kreq *req"
.Fa "int64_t val"
.Fc
.Ft void
.Fo khtml_ncr
.Fa "struct kreq *req"
.Fa "uint16_t ncr"
.Fc
.Ft void
.Fo khtml_text
.Fa "struct kreq *req"
.Fa "const char *cp"
.Fc
.Sh DESCRIPTION
The
.Nm
functions output HTML elements, attributes, and text for
.Xr kcgi 3
contexts allocated with
.Xr khttp_parse 3 .
None of these functions may be called before
.Xr khttp_body 3 .
.Bl -tag -width Ds
.It Fn khtml_attr
Open the scope of element
.Fa elem
with matching key-value pairs in the varargs for its attributes.
The maximum number of nested scopes is fixed at 128.
The terminating attribute key must be
.Dv ATTR__MAX.
.It Fn khtml_attrx
Like
.Fn khtml_attr ,
but accepts an addition parameter
.Ft "enum attrx"
following the
.Ft "enum attr"
that specifies the attribute type.
This is useful for non-string attributes, for example, invoking with
.Dv KATTR_WIDTH ,
.Dv KATTRX_INT ,
and
.Li 100
will properly render the integer type.
The types route through to
.Fn khtml_text
for
.Dv KATTRX_STRING ,
.Fn khtml_int
for
.Dv KATTRX_INT ,
.Fn khtml_double
for
.Dv KATTRX_DOUBLE .
.It Fn khtml_close
Close the last
.Fa count
scopes.
This will call
.Xr abort 3
if
.Fa count
exceeds the number of open scopes.
If
.Fa count
is zero, this will close all scopes.
.Em \&Do not
close HTML
.Qq void
elements such as
.Aq meta .
.It Fn khtml_closeto
Close until a certain level
.Fa pos
in the HTML tree, which must be at or above the current level.
Usually used with
.Fn khtml_elemat .
.It Fn khtml_double
Wrapper over
.Fn khtml_text
for formatting a double-precision floating point.
This uses a buffer of size
.Li 256
and the
.Li %g
to
.Xr snprintf 3 ,
which may not be what you want.
.It Fn khtml_elem
Invokes
.Fn khtml_attr
with no attributes.
.It Fn khtml_elemat
Save the current point in the HTML tree.
Useful for saving a
.Fn khtml_closeto
rollback point.
.It Fn khtml_entity
Emit the numeric character reference for
.Va entity .
.It Fn khtml_int
Wrapper over
.Fn khtml_text
for formatting a 64-bit signed integer.
.It Fn khtml_ncr
Emit the numeric character reference
.Va ncr .
.It Fn khtml_text
Emit the text
.Va cp ,
escaping it (e.g.,
.Sq \&> )
for HTML if necessary.
.El
.Pp
If your application puts data directly into the HTTP body without HTML
escaping, use the following functions:
.Bl -ohang -offset indent
.It Fn khttp_putc "struct kreq *req" "int c"
Append a single character
.Fa c
to the output stream.
.It Fn khttp_puts "struct kreq *req" "const char *cp"
Append a nil-terminated string
.Fa cp
to the output stream.
.It Fn khttp_write "struct kreq *req" "const void *buf" "size_t sz"
Append a (possibly) binary buffer
.Fa buf
of length
.Fa sz
to the output stream.
.El
.Pp
The following functions are provided for the global
.Va keys
array.
.Bl -ohang -offset indent
.It Fn kvalid_date "struct kpair *kp"
Validate a date in ISO 8601
.Li YYYY-MM-DD
format.
Returned as the number of seconds since the UNIX epoch, 1970-01-01.
.It Fn kvalid_double "struct kpair *kp"
Validate a double-precision floating-point number.
.Em Note :
this uses the current locale via
.Xr strtod 3 .
.It Fn kvalid_email "struct kpair *kp"
Validate an e-mail address.
.Em Note :
this is a heuristic validation, not a formal one.
.It Fn kvalid_int "struct kpair *kp"
Validate a signed 64-bit integer.
.It Fn kvalid_string "struct kpair *kp"
Validate a nil-terminated string.
.Em Note :
the string may be zero-length!
.It Fn kvalid_stringne "struct kpair *kp"
Same as
.Fn kvalid_string ,
but ensures that the string is non-empty.
.It Fn kvalid_udouble "struct kpair *kp"
Validate a positive non-zero double-precision floating-point number.
.Em Note :
this uses the current locale via
.Xr strtod 3 .
.It Fn kvalid_uint "struct kpair *kp"
Validate an unsigned 64-bit natural number greater than or equal to 0.
.El
.Pp
The following functions provide safe wrappers for memory allocation.
They simply call through to the standard
.Xr malloc 3 ,
.Xr calloc 3
and so on:
.Nm
does
.Em not
manage its own memory!
These functions never return
.Dv NULL .
.Bl -ohang -offset indent
.It Fn kasprintf "char **p" "const char *fmt" "..."
Allocate as with
.Xr asprintf 3 ,
but exit on memory exhaustion.
.It Fn kcalloc "size_t nm" "size_t sz"
Allocate and zero as with
.Xr calloc 3 ,
but exit on memory exhaustion.
.It Fn kmalloc "size_t sz"
Allocate as with
.Xr malloc 3 ,
but exit on memory exhaustion.
.It Fn kreallocarray "void *p" "size_t nm" "size_t sz"
Allocate as with
.Xr reallocarray 3 ,
but exit on memory allocation and discourage multiplication overflows
when multipying count by type size.
.It Fn kstrdup "const char *cp"
Allocate as with
.Xr strdup 3 ,
but exit on memory exhaustion.
.It Fn krealloc "void *p" "size_t sz"
Allocate as with
.Xr realloc 3 ,
but exit on memory exhaustion.
.El
.Pp
The
.Nm
library also has a simple, light-weight template system.
This is coordinated entirely by two related functions:
.Bl -ohang -offset indent
.It Fn khttp_template "struct kreq *req" "struct ktemplate *t" "const char *fname"
This function memory-maps the file
.Fa fname
and appends it to the output stream.
Whenever a key is located, where a key named
.Li key
would be written in
.Li @@key@@ ,
it is looked up in the
.Fa t
key array.
If found, the callback is invoked with the key index and the optional
argument.
Callbacks may continue to process, emit HTML trees, and so on.
.It Fn khttp_template_buf "struct kreq *req" "struct ktemplate *t" \
"const char *buf" "size_t sz"
Like
.Fn khttp_template ,
but accepting a (possibly binary) buffer and its length.
.El
.Pp
Several convenience functions are also provided for managing HTTP and
HTML concepts.
.Bl -ohang -offset indent
.It Fn kutil_invalidate "struct kreq *req" "struct kpair *kp"
Mark a validated input field
.Fa kp
as invalidate.
If the input field is not valid, this function does nothing.
.It Fn kutil_urlencode "const char *cp"
Return a dynamically-allocated URL-encoded string or
.Dv NULL
if
.Fa cp
is
.Dv NULL
and/or memory allocation fails.
The caller must free the string with
.Xr free 3 .
.It Fn kutil_urlabs "enum kscheme scheme" \
"const char *host" "uint16_t port" "const char *path"
Return a dynamically-allocated absolute URL with scheme
.Fa scheme ,
domain
.Fa host ,
port
.Fa port ,
and path part (including query string, etc.)
.Fa path .
This
.Em is not
URL-encoded in any way, so make sure to use
.Fn kutil_urlpart ,
.Fn kutil_urlpartx ,
or just
.Fn kutil_urlencode
for the sensitive parts.
The caller must free the string with
.Xr free 3 .
The function will exit on memory exhaustion.
.It Fn kutil_urlpart "struct kreq *req" "const char *path" \
"const char *mime" "const char *page" "..."
Return a dynamically-allocated partial URL, meaning just the path component,
filename, MIME suffix, and optionally key-value query string pairs.
The variable arguments refer to input keys and values, both
nil-terminated character pointers.
This variable array must be terminated with a
.Dv NULL .
The caller must free the string with
.Xr free 3 .
The function will exit on memory exhaustion.
.It Fn kutil_urlpartx "struct kreq *req" "const char *path" \
"const char *mime" "const char *page" "..."
Like
.Fn kutil_urlpart ,
but accepting key, an
.Vt "enum kattrx"
value type, and the typed value itself.
.El
.Sh EXAMPLES
A simple example exists in
.Pa @DATADIR@/sample.c .
It illustrates templating, form handling, and so on.
.Sh STANDARDS
Many standards are involved in the
.Nm
library, most generally being draft RFC 3875,
.Qq The Common Gateway Interface (CGI) Version 1.1 .
.Bl -bullet
.It
HTML5 compatible with the draft standard of February 2014.
.It
The partial multipart form data support is defined by RFC 2388,
.Qq Returning Values from Forms: multipart/form-data ,
which is further defined by RFCs 2045 and 2046,
.Qq Multipurpose Internet Mail Extensions .
.It
MIME type names are registered with IANA.
.It
URLs are formatted according to RFC 1630,
.Qq Universal Resource Identifiers in WWW .
.It
HTTP response headers are standardised in RFC 2616,
.Qq HTTP/1.1
and further in RFC 4229,
.Qq HTTP Header Field Registrations .
.It
Permanent URI schemes are registered with IANA.
.El
.Sh AUTHORS
The
.Nm
library was written by
.An Kristaps Dzonsons Aq Mt kristaps@bsd.lv .
