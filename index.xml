<!DOCTYPE html>
<html>
	<head>
		<meta name="viewport" content="initial-scale=1.0, user-scalable=no" />
		<meta charset='utf-8' /> 
		<title>kcgi | minimal CGI library for C</title>
		<style>
			html, body { margin: 0; padding: 0; }
			header { margin-top: 1em; }
			header span.nm { font-size: 16pt; }
			header span.nd { font-size: 14pt; }
			article span.nm, article a.nm { font-style: italic; }
			header, article, footer { width: 80%; margin-left: auto; margin-right: auto; }
			body { color: #333; font-family: Times,serif; line-height: 120%; }
			nav { color: #666; margin-top: 0.5ex; }
			nav span { border-left: thin solid silver; margin-left: 0.25ex; padding-left: 0.5ex; }
			nav span:first-child { border: 0; padding: 0; margin: 0; }
			a { text-decoration: none; }
			footer { margin-top: 1em; font-size: smaller; color: #666; }
			footer a { color: #000; }
			h2 { font-size: inherit; font-weight: bolder; color: #333; }
			.file { font-style: italic; }
			#version { border: thin solid #ddd; background-color: #eee; padding: 0.5ex; border-radius: 1ex; }
			#version h2 { margin: 0.25ex; font-weight: inherit; }
			#version h2 span { font-style: italic; color: #666; }
			#version p { margin: 0.25ex; }
			@media only screen and (max-width: 600px), only screen and (max-device-width: 600px) {
				header, article, footer { width: 98%; }
			}
		</style>
	</head>
	<body>
		<header>
			<span class="nm">kcgi</span>
			&#8212;
			<span class="nd">minimal CGI library for C</span>
			<nav>
				<span>version <span>@VERSION@</span></span>
				<span><a href="snapshots/kcgi.tgz">Sources</a></span>
				<span><a href="snapshots">Archives</a></span>
			</nav>
		</header>
		<article>
			<p>
				<span class="nm">kcgi</span> is a minimal CGI library for web applications (HTML and HTTP) in <a
					href="http://opensource.org/licenses/ISC" rel="license">ISC licensed</a> ISO C.  
				It was designed to be secure and auditable.
				See a <a href="http://www.lemoda.net/c/cgi-libraries/index.html">Comparison of CGI Libraries in C</a> for
				alternatives.
				To start, download <a href="snapshots/kcgi.tgz">kcgi.tgz</a> and run <code>make
					install</code> into your <code>PREFIX</code> of choice.
				The <a href="kcgi.3.html">kcgi(3)</a> manpage documents usage.
				<span class="nm">kcgi</span> is a <a href="http://www.bsd.lv">BSD.lv</a> project.
			</p>
			<div id="version">
				<h2>
					New in version <span>@VERSION@</span>...
				</h2>
				<p>
					Process separation of parse context.
					Now, <code>khttp_parse</code> forks a child process to parse input data, which returns well-defined results to
					the parent over a <code>socketpair</code>.
					Moreover, <code>khttp_parse</code> does not exit on failure, but instead returns an error to the caller.
					For consistency with <a href="http://www.openbsd.org">OpenBSD</a>, <code>kxrealloc</code> and
					<code>krealloc</code> have been renamed <code>krealloc</code> and <code>kreallocarray</code>,
					respectively.
				</p>
			</div>
			<p>
				The following is a rough feature list of <span class="nm">kcgi</span>.
				See the <a href="kcgi.3.html">manual</a> for details.
			</p>
			<ul>
				<li><a href="#input">input</a>: query string, cookie, and form (multipart form-data and mixed, urlencoded, and plain)</li>
				<li>lightweight functions for building HTML5 trees and HTTP headers</li>
				<li>pretty-printing of HTML content</li>
				<li>simple, callback-based template system</li>
				<li><a href="#security">security</a>: process-separation of input data parsing</li>
				<li><a href="#compression">compression</a>: automatic HTTP compression</li>
			</ul>
			<p>
				Most <span class="nm">kcgi</span> applications work as follows (the <a href="sample.c.txt">sample.c</a> file
				distributed in the source consists of a full working example):
			</p>
			<ol>
				<li>
					Call <code>khttp_parse</code> as early as possible.  
					This will parse input and cookie fields and set up the HTTP environment.
					At present, <span class="nm">kcgi</span> parses (and optionally validates) cookies; query string
					<q>GET</q> data; and the urlencoded, form-data, and plain <q>POST</q> data.
					These use
					<code>kvalid_double</code>,
					<code>kvalid_email</code>,
					<code>kvalid_int</code>,
					<code>kvalid_string</code>,
					<code>kvalid_udouble</code>,
					<code>kvalid_uint</code>,
					or locally-defined functions for validation.
					It also maps page and MIME requests.
				</li>
				<li>
					Process input fields by examining the <code>struct kpair</code> elements of the main <code>struct
						kreq</code> structure.
					This main structure contains all parsed input fields and environment information (in the interests of
					simplicity, <span class="nm">kcgi</span> uses a single structure instead of accessor functions).
				</li>
				<li>
					Emit HTTP headers with <code>khttp_head</code>, followed by <code>khttp_body</code> to begin the HTTP
					body.
					The latter will automatically trigger compression, if requested by the client.
				</li>
				<li>
					Emit HTTP body output using HTML5 tree-building functions 
					<code>khtml_attr</code>,
					<code>khtml_attrx</code>,
					<code>khtml_close</code>, 
					<code>khtml_closeto</code>, 
					<code>khtml_elem</code>,
					<code>khtml_elemat</code>, 
					<code>khtml_entity</code>, 
					<code>khtml_int</code>,
					<code>khtml_ncr</code>, or
					<code>khtml_text</code>; or
				</li>
				<li>
					use the <code>khtml_template</code> function to populate file templates with a mixture of HTML-building
					functions; or
				</li>
				<li>
					use <code>khttp_putc</code> and <code>khttp_puts</code> for non-HTML media.
				</li>
				<li>
					Call <code>khttp_free</code> to close the HTTP document and free all memory.
				</li>
			</ol>
			<p>
				This library is still quite new.
				Contact <a href="http://kristaps.bsd.lv">Kristaps</a> with questions or comments.
			</p>
			<h2 id="security">
				Security
			</h2>
			<p>
				As a security precaution, the <span class="nm">kcgi</span> library parses untrusted network data in a child
				process.
				When invoked, <code>khttp_parse</code> will fork.
				The child process is responsible for reading and parsing form data from the web server.
				This parsed data is returned to the parent process over a <code>socketpair</code>.
			</p>
			<p>
				Originally, the <a href="http://www.openbsd.org">OpenBSD</a> <q>imsg</q> approach was used, but this is
				constrained in message size due to the underlying <code>SOCK_DGRAM</code> usage.
				The socket communication in <span class="nm">kcgi</span> uses <code>SOCK_STREAM</code>.
			</p>
			<h2 id="compression">
				Compression
			</h2>
			<p>
				If <code>HAVE_ZLIB</code> is enabled during compilation (via the Makefile), <span class="nm">kcgi</span> will
				use <a href="http://www.zlib.net">zlib</a> to compress the HTTP body.
				Compression is only enabled if the correct (<q>gzip</q>) HTTP request header is provided.
			</p>
			<h2 id="input">
				Input
			</h2>
			<p>
				All common input methods&mdash;query string, cookie, and form (multipart form-data and mixed, urlencoded, and
				plain&mdash;are supported by <span class="nm">kcgi</span>.
				As described in the <a href="#security">Security</a> section, these fields are all parsed from network data in a
				child process.
			</p>
		</article>
		<footer>
			&#169; 2014 <a href="http://kristaps.bsd.lv">Kristaps Dzonsons</a>,
			$Date$
		</footer>
	</body>
</html>
