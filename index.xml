<!DOCTYPE html>
<html>
	<head>
		<meta name="viewport" content="initial-scale=1.0, user-scalable=no" />
		<meta charset='utf-8' /> 
		<title>kcgi | minimal CGI library for C</title>
		<link rel="stylesheet" href="index.css" type="text/css" />
	</head>
	<body>
		<header>
			<h1>
				<span class="nm">kcgi</span>&#8212;<span class="nd">minimal CGI library in C</span>
			</h1>
			<nav>
				<span><a href="snapshots/kcgi.tgz">Sources</a></span>
				<span><a href="snapshots">Archives</a></span>
			</nav>
			<section id="version">
				<p>
					<i>Version @VERSION@</i> is a minor-number bump due to a significantly changing API.
					Not much has changed in the back-end of the system (with one significant exception!); most of these changes are organisational.
				</p>
				<ul>
					<li>
						Add a <a href="http://www.cl.cam.ac.uk/research/security/capsicum/freebsd.html">Capsicum</a>
						sandbox on <a href="http://www.freebsd.org">FreeBSD</a>.
					</li>
					<li>
						Split <span class="file">libkcgi</span>, <a href="kcgi.3.html">kcgi(3)</a>, into
						<span class="file">libkcgihtml</span>, <a href="kcgihtml.3.html">kcgihtml(3)</a>.
						This simplifies the system dramatically and allows for more extensions (e.g., JSON) outside of
						the main body of code.
					</li>
					<li>
						Split <a href="kcgi.3.html">kcgi(3)</a> into per-function manpages, e.g., <a
							href="khttp_parse.3.html">khttp_parse(3)</a>.
						This makes system reading documentation much easier.
					</li>
					<li>
						Merge small fix to escape quotes in HTML text and <a
							href="kvalid_string.3.html">kvalid_date(3)</a> month calculator.
					</li>
					<li>
						Add <a href="khttp_free.3.html">khttp_child_free(3)</a> for closing the HTTP in a child of the
						CGI process.
						This is useful if your web application forks to perform some long-running function (e.g.,
						mailing).
					</li>
					<li>
						Add a few more commonly-used media types.
					</li>
				</p>
			</section>
		</header>
		<article>
			<section id="intro">
				<p>
					<span class="nm">kcgi</span> is a minimal CGI library for web applications in <a
						href="http://opensource.org/licenses/ISC" rel="license">ISC licensed</a> ISO C.  
					It was designed to be secure and auditable.
					See a <a href="http://www.lemoda.net/c/cgi-libraries/index.html">Comparison of CGI Libraries in C</a>
					for alternatives.
					To start, download <a href="snapshots/kcgi.tgz">kcgi.tgz</a> and run <code>make install</code> into your
					<code>PREFIX</code> of choice, then read the <a href="kcgi.3.html">kcgi(3)</a> and <a
						href="kcgihtml.3.html">kcgihtml(3)</a> manuals for usage.
					Contact <a href="http://kristaps.bsd.lv">Kristaps</a> with questions or comments.
					<span class="nm">kcgi</span> is a <a href="http://www.bsd.lv">BSD.lv</a> project.
				</p>
			</section>
			<section id="sample">#include &lt;stdint.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;<a href="kcgi.3.html">kcgi.h</a>&gt;

int main(void) {
  struct kreq r;
  struct kvalid key = { kvalid_int, "integer" };
  const char *page = "index";
  if ( ! <a href="khttp_parse.3.html">khttp_parse</a>(&amp;r, &amp;key, 1, &amp;page, 1, 0))
    return(EXIT_FAILURE);
  <a href="khttp_head.3.html">khttp_head</a>(&amp;r, kresps[KRESP_STATUS], "%s", khttps[KHTTP_200]);
  khttp_head(&amp;r, kresps[KRESP_CONTENT_TYPE], "%s", kmimetypes[r.mime]);
  <a href="khttp_body.3.html">khttp_body</a>(&amp;r);
  <a href="khttp_write.3.html">khttp_puts</a>(&amp;r, &quot;Hello, world!&quot;);
  return(EXIT_SUCCESS);
}</section>
			<section id="features">
				<h2 id="security">
					Security
				</h2>
				<p>
					As a security precaution, the <span class="nm">kcgi</span> library parses and validates untrusted
					network data in a sandboxed child process by forking within <a
						href="khttp_parse.3.html">khttp_parse(3)</a>, where child process is responsible for reading and
					parsing form data from the web server.
					This parsed data is returned to the parent process over a socket.
					This method of sandboxing the untrusted child process follows <a href="http://www.openssh.org">OpenSSH</a>, 
					and requires special handling for each operating system:
				</p>
				<dl>
					<dt>
						<a href="http://www.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man4/systrace.4">systrace(4)</a>
						(<a href="http://www.openbsd.org">OpenBSD</a>)
					</dt>
					<dd>
						This requires the existence of <span class="file">/dev/systrace</span> if running in a
						<code>chroot(2)</code>, which is strongly suggested.
						If you're using a stock <a href="http://www.openbsd.org">OpenBSD</a>, make sure that the
						mount-point of <span class="file">/dev/systrace</span> isn't mounted <code>nodev</code>!
					</dd>
					<dt>
						<a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man3/sandbox_init.3.html">sandbox_init(3)</a>
						(<a href="https://www.apple.com/osx/">Apple OSX</a>)
					</dt>
					<dd>
						This uses the sandboxing profile for <q>pure computation</q> as provided in Mac OS X Leopard and
						later.
						This is supplemented by resource limiting via <code>setrlimit(2)</code>.
					</dd>
					<dt>
						<a href="https://www.freebsd.org/cgi/man.cgi?query=capsicum&sektion=4">capsicum(4)</a>
						(<a href="https://www.freebsd.org">FreeBSD</a>)
					</dt>
					<dd>
						Uses the capabilities facility on <a href="http://www.freebsd.org">FreeBSD</a> 10 and later.
						This is supplemented by resource limiting with <code>setrlimit(2)</code>.
					</dd>
				</dl>
				<p>
					Since validation occurs within the sandbox, special care must be taken that validation routines don't
					access the environment (e.g., by opening files, network connections, etc.), as the child will be
					abruptly killed by the sandbox facility.
					If required, this kind of validation can take place after the parse validation sequence.
				</p>
				<h2 id="portability">
					Portability
				</h2>
				<p>
					<span class="nm">kcgi</span> should run on any modern UNIX systems and with any web server.
					To date, it has been built and run on GNU/<a href="http://www.linux.org">Linux</a> machines, BSD (<a
						href="http://www.openbsd.org">OpenBSD</a>), and <a href="http://www.apple.com/osx">Mac OSX</a>
					(Snow Leopard, Lion) on i386 and AMD64.
					It has been deployed under <a href="https://httpd.apache.org/">Apache</a> and <a
						href="http://nginx.org">nginx</a> (via the <code>slowcgi</code> wrapper).
				</p>
				<p>
					Portability across UNIX systems is made possible by a small <code>configure</code> script that checks
					for minor inconsistencies such as <code>strlcpy(3)</code>, the <a href="#security">Security</a> mechanisms,
					and for <a href="#compression">Compression</a> support.
				</p>
				<h2 id="extending">
					Extensibility
				</h2>
				<p>
					While page maps and input validation are entirely driven by the interfacing application, <span
						class="nm">kcgi</span> also allows for extension of the default HTTP headers, schemas, MIME
					types, and so on.
					Reasonable default have been provided for convenience.
					For specifics, see <a href="khttp_parse.3.html">khttp_parse(3)</a>.
				</p>
				<p>
					The library can also be extended for different output modes.
					One such mode, <a href="kcgihtml.3.html">kcgihtml(3)</a>, is bundled with the system.
					It allows a mechanism for building HTML5 trees around the usual
					<a href="khttp_write.3.html">khttp_write(3)</a> family of functions.
				</p>
				<h2 id="compression">
					Compression
				</h2>
				<p>
					If <code>HAVE_ZLIB</code> is enabled during compilation (via the <a href="#portability">Portability</a>
					mechanism), <a href="khttp_body.3.html">khttp_body(3)</a> will signal use of <a
						href="http://www.zlib.net">zlib</a> to compress the HTTP body.
					Compression is only enabled if the client provides the correct (<q>gzip</q>) HTTP request header.
				</p>
				<h2 id="input">
					Input Processing
				</h2>
				<p>
					All common input methods&mdash;query string, cookie, and form (multipart form-data and mixed,
					urlencoded, and plain&mdash;are supported by <span class="nm">kcgi</span>.
					As described in the <a href="#security">Security</a> section, these fields are all parsed and validated
					from network data in a child process.
					Each input key-value pair can be matched (by key name) to a validator, which is run when fields are
					parsed.
					You can then look up key-value pairs constant-time in a table indexed by that key.
				</p>
				<h2 id="template">
					Templating
				</h2>
				<p>
					Many application will want just to fill in an output template instead of creating complex output trees
					(relegating most work to JavaScript and JSON).
					<span class="nm">kcgi</span> provides the <a href="khttp_template.3.html">khttp_template(3)</a> family
					of functions to fill in files or memory buffers with data.
					Templates are the most common usage of <span class="nm">kcgi</span>, as they allow for a strong
					disconnect between prsentation and logic.
				</p>
			</section>
		</article>
		<footer>
			&#169; 2014 <a href="http://kristaps.bsd.lv">Kristaps Dzonsons</a>,
			$Date$
		</footer>
	</body>
</html>
